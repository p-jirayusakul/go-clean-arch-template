// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/p-jirayusakul/go-clean-arch-template/internal/repositories/factories (interfaces: DBFactory)
//
// Generated by this command:
//
//	mockgen -package mockup -destination test/mockup/db.go github.com/p-jirayusakul/go-clean-arch-template/internal/repositories/factories DBFactory
//

// Package mockup is a generated GoMock package.
package mockup

import (
	context "context"
	reflect "reflect"

	database "github.com/p-jirayusakul/go-clean-arch-template/database/sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockDBFactory is a mock of DBFactory interface.
type MockDBFactory struct {
	ctrl     *gomock.Controller
	recorder *MockDBFactoryMockRecorder
}

// MockDBFactoryMockRecorder is the mock recorder for MockDBFactory.
type MockDBFactoryMockRecorder struct {
	mock *MockDBFactory
}

// NewMockDBFactory creates a new mock instance.
func NewMockDBFactory(ctrl *gomock.Controller) *MockDBFactory {
	mock := &MockDBFactory{ctrl: ctrl}
	mock.recorder = &MockDBFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBFactory) EXPECT() *MockDBFactoryMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockDBFactory) CreateAccount(arg0 context.Context, arg1 database.CreateAccountParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockDBFactoryMockRecorder) CreateAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockDBFactory)(nil).CreateAccount), arg0, arg1)
}

// CreateAddresses mocks base method.
func (m *MockDBFactory) CreateAddresses(arg0 context.Context, arg1 database.CreateAddressesParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddresses", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddresses indicates an expected call of CreateAddresses.
func (mr *MockDBFactoryMockRecorder) CreateAddresses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddresses", reflect.TypeOf((*MockDBFactory)(nil).CreateAddresses), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockDBFactory) DeleteAccount(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockDBFactoryMockRecorder) DeleteAccount(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockDBFactory)(nil).DeleteAccount), arg0, arg1)
}

// DeleteAddressesById mocks base method.
func (m *MockDBFactory) DeleteAddressesById(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddressesById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddressesById indicates an expected call of DeleteAddressesById.
func (mr *MockDBFactoryMockRecorder) DeleteAddressesById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddressesById", reflect.TypeOf((*MockDBFactory)(nil).DeleteAddressesById), arg0, arg1)
}

// GetAccountByEmail mocks base method.
func (m *MockDBFactory) GetAccountByEmail(arg0 context.Context, arg1 string) (database.GetAccountByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", arg0, arg1)
	ret0, _ := ret[0].(database.GetAccountByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockDBFactoryMockRecorder) GetAccountByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockDBFactory)(nil).GetAccountByEmail), arg0, arg1)
}

// GetAccountByID mocks base method.
func (m *MockDBFactory) GetAccountByID(arg0 context.Context, arg1 string) (database.GetAccountByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0, arg1)
	ret0, _ := ret[0].(database.GetAccountByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockDBFactoryMockRecorder) GetAccountByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockDBFactory)(nil).GetAccountByID), arg0, arg1)
}

// GetAddressById mocks base method.
func (m *MockDBFactory) GetAddressById(arg0 context.Context, arg1 string) (database.GetAddressByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressById", arg0, arg1)
	ret0, _ := ret[0].(database.GetAddressByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressById indicates an expected call of GetAddressById.
func (mr *MockDBFactoryMockRecorder) GetAddressById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressById", reflect.TypeOf((*MockDBFactory)(nil).GetAddressById), arg0, arg1)
}

// IsAccountAlreadyExists mocks base method.
func (m *MockDBFactory) IsAccountAlreadyExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccountAlreadyExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAccountAlreadyExists indicates an expected call of IsAccountAlreadyExists.
func (mr *MockDBFactoryMockRecorder) IsAccountAlreadyExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccountAlreadyExists", reflect.TypeOf((*MockDBFactory)(nil).IsAccountAlreadyExists), arg0, arg1)
}

// IsAddressesAlreadyExists mocks base method.
func (m *MockDBFactory) IsAddressesAlreadyExists(arg0 context.Context, arg1 database.IsAddressesAlreadyExistsParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAddressesAlreadyExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAddressesAlreadyExists indicates an expected call of IsAddressesAlreadyExists.
func (mr *MockDBFactoryMockRecorder) IsAddressesAlreadyExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAddressesAlreadyExists", reflect.TypeOf((*MockDBFactory)(nil).IsAddressesAlreadyExists), arg0, arg1)
}

// IsEmailAlreadyExists mocks base method.
func (m *MockDBFactory) IsEmailAlreadyExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailAlreadyExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailAlreadyExists indicates an expected call of IsEmailAlreadyExists.
func (mr *MockDBFactoryMockRecorder) IsEmailAlreadyExists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailAlreadyExists", reflect.TypeOf((*MockDBFactory)(nil).IsEmailAlreadyExists), arg0, arg1)
}

// ListAccounts mocks base method.
func (m *MockDBFactory) ListAccounts(arg0 context.Context) ([]database.ListAccountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts", arg0)
	ret0, _ := ret[0].([]database.ListAccountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts.
func (mr *MockDBFactoryMockRecorder) ListAccounts(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockDBFactory)(nil).ListAccounts), arg0)
}

// ListAddresses mocks base method.
func (m *MockDBFactory) ListAddresses(arg0 context.Context) ([]database.ListAddressesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddresses", arg0)
	ret0, _ := ret[0].([]database.ListAddressesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddresses indicates an expected call of ListAddresses.
func (mr *MockDBFactoryMockRecorder) ListAddresses(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddresses", reflect.TypeOf((*MockDBFactory)(nil).ListAddresses), arg0)
}

// ListAddressesByAccountId mocks base method.
func (m *MockDBFactory) ListAddressesByAccountId(arg0 context.Context, arg1 string) ([]database.ListAddressesByAccountIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddressesByAccountId", arg0, arg1)
	ret0, _ := ret[0].([]database.ListAddressesByAccountIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddressesByAccountId indicates an expected call of ListAddressesByAccountId.
func (mr *MockDBFactoryMockRecorder) ListAddressesByAccountId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddressesByAccountId", reflect.TypeOf((*MockDBFactory)(nil).ListAddressesByAccountId), arg0, arg1)
}

// UpdateAccountPasswordByEmail mocks base method.
func (m *MockDBFactory) UpdateAccountPasswordByEmail(arg0 context.Context, arg1 database.UpdateAccountPasswordByEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountPasswordByEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountPasswordByEmail indicates an expected call of UpdateAccountPasswordByEmail.
func (mr *MockDBFactoryMockRecorder) UpdateAccountPasswordByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountPasswordByEmail", reflect.TypeOf((*MockDBFactory)(nil).UpdateAccountPasswordByEmail), arg0, arg1)
}

// UpdateAddressById mocks base method.
func (m *MockDBFactory) UpdateAddressById(arg0 context.Context, arg1 database.UpdateAddressByIdParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddressById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddressById indicates an expected call of UpdateAddressById.
func (mr *MockDBFactoryMockRecorder) UpdateAddressById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddressById", reflect.TypeOf((*MockDBFactory)(nil).UpdateAddressById), arg0, arg1)
}
